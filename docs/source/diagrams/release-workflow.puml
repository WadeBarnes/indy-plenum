@startuml

:**Tag Triggered - Release Workflow**;
start

:Create a tag on the branch and commit on which the release 
is to be based. 

The tag must be in the following format:
  - ""setRelease-v<Major>.<Minor>.<Patch>[-rc<Num>]""

Examples:
  - To generate an RC Release (marked as a pre-release)
  - ""setRelease-v1.12.6-rc0""
  - To generate an official Release
    - ""setRelease-v1.12.6"";

partition "**Workflow**: Release PR" {
  floating note left
    Workflow triggered 
    by the ""setRelease""
    tag being pushed.
  end note

  :Check out target branch based on tag;
  :Determine target branch from tag;
  :Extract version number from tag;
  :Bump package version;
  :Submit 'Release' PR to the target branch;
}

partition "**Workflow**: Build / Test / Package" {
  floating note left
    Workflow triggered 
    by the Release PR
    being created.
  end note

  :Check out target branch;
  :Build;
  :Execute All Unit Tests;
  :Execute All Release Tests 
  (i.e. run indy-test-automation);
  :Build Packages;
}

if (**Review PR** - All tests passed?) then (Merge PR)
  partition "**Workflow**: Publish Release" {
    floating note right
      Workflow triggered 
      by the Release PR
      being merged.
    end note

    :Extract version number from the 
    project's version file.  Which was 
    contained in the Release PR.;
    :Create a GitHub Release;
    :Set tag and title to match release version;

    if (is RC Release) then (yes)
      :Set pre-release checkbox;
    else (no)
    endif

    :Publish Packages
      - Preferably this would simply publish the packages that were
         build and tested by the Build / Test / Package Workflow.;
    :Publish GitHub Release;
  }
else (Close PR without Merging)
  :Release process aborted;
endif

stop
@enduml
